{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","kalebr-frontend/tests/helpers/destroy-app.js","kalebr-frontend/tests/helpers/destroy-app.jshint.js","kalebr-frontend/tests/helpers/module-for-acceptance.js","kalebr-frontend/tests/helpers/module-for-acceptance.jshint.js","kalebr-frontend/tests/helpers/resolver.js","kalebr-frontend/tests/helpers/resolver.jshint.js","kalebr-frontend/tests/helpers/start-app.js","kalebr-frontend/tests/helpers/start-app.jshint.js","kalebr-frontend/tests/helpers/validate-properties.js","kalebr-frontend/tests/test-helper.js","kalebr-frontend/tests/test-helper.jshint.js","kalebr-frontend/tests/unit/helpers/adder-test.js","kalebr-frontend/tests/unit/models/user-test.js","kalebr-frontend/tests/unit/routes/application-test.js","kalebr-frontend/tests/unit/routes/login-test.js","kalebr-frontend/tests/unit/routes/questions-test.js","kalebr-frontend/tests/unit/routes/questions/edit-test.js","kalebr-frontend/tests/unit/routes/questions/new-test.js","kalebr-frontend/tests/unit/routes/users-test.js","kalebr-frontend/tests/unit/routes/users/edit-test.js","kalebr-frontend/tests/unit/routes/users/new-test.js","kalebr-frontend/tests/unit/serializers/application-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('kalebr-frontend/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('kalebr-frontend/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('kalebr-frontend/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'kalebr-frontend/tests/helpers/start-app', 'kalebr-frontend/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _kalebrFrontendTestsHelpersStartApp, _kalebrFrontendTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _kalebrFrontendTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _kalebrFrontendTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('kalebr-frontend/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('kalebr-frontend/tests/helpers/resolver', ['exports', 'kalebr-frontend/resolver', 'kalebr-frontend/config/environment'], function (exports, _kalebrFrontendResolver, _kalebrFrontendConfigEnvironment) {\n\n  var resolver = _kalebrFrontendResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _kalebrFrontendConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _kalebrFrontendConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('kalebr-frontend/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('kalebr-frontend/tests/helpers/start-app', ['exports', 'ember', 'kalebr-frontend/app', 'kalebr-frontend/config/environment'], function (exports, _ember, _kalebrFrontendApp, _kalebrFrontendConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _kalebrFrontendConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _kalebrFrontendApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('kalebr-frontend/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('kalebr-frontend/tests/helpers/validate-properties', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n  exports.testValidPropertyValues = testValidPropertyValues;\n  exports.testInvalidPropertyValues = testInvalidPropertyValues;\n\n  var run = _ember['default'].run;\n\n  function validateValues(object, propertyName, values, isTestForValid) {\n    var promise = null;\n    var validatedValues = [];\n\n    values.forEach(function (value) {\n      function handleValidation(errors) {\n        var hasErrors = object.get('errors.' + propertyName + '.firstObject');\n        if (hasErrors && !isTestForValid || !hasErrors && isTestForValid) {\n          validatedValues.push(value);\n        }\n      }\n\n      run(object, 'set', propertyName, value);\n\n      var objectPromise = null;\n      run(function () {\n        objectPromise = object.validate().then(handleValidation, handleValidation);\n      });\n\n      // Since we are setting the values in a different run loop as we are validating them,\n      // we need to chain the promises so that they run sequentially. The wrong value will\n      // be validated if the promises execute concurrently\n      promise = promise ? promise.then(objectPromise) : objectPromise;\n    });\n\n    return promise.then(function () {\n      return validatedValues;\n    });\n  }\n\n  function testPropertyValues(propertyName, values, isTestForValid, context) {\n    var validOrInvalid = isTestForValid ? 'Valid' : 'Invalid';\n    var testName = validOrInvalid + ' ' + propertyName;\n\n    (0, _emberQunit.test)(testName, function (assert) {\n      var object = this.subject();\n\n      if (context && typeof context === 'function') {\n        context(object);\n      }\n\n      // Use QUnit.dump.parse so null and undefined can be printed as literal 'null' and\n      // 'undefined' strings in the assert message.\n      var valuesString = QUnit.dump.parse(values).replace(/\\n(\\s+)?/g, '').replace(/,/g, ', ');\n      var assertMessage = 'Expected ' + propertyName + ' to have ' + validOrInvalid.toLowerCase() + ' values: ' + valuesString;\n\n      return validateValues(object, propertyName, values, isTestForValid).then(function (validatedValues) {\n        assert.deepEqual(validatedValues, values, assertMessage);\n      });\n    });\n  }\n\n  function testValidPropertyValues(propertyName, values, context) {\n    testPropertyValues(propertyName, values, true, context);\n  }\n\n  function testInvalidPropertyValues(propertyName, values, context) {\n    testPropertyValues(propertyName, values, false, context);\n  }\n});","define('kalebr-frontend/tests/test-helper', ['exports', 'kalebr-frontend/tests/helpers/resolver', 'ember-qunit'], function (exports, _kalebrFrontendTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_kalebrFrontendTestsHelpersResolver['default']);\n});","define('kalebr-frontend/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('kalebr-frontend/tests/unit/helpers/adder-test', ['exports', 'kalebr-frontend/helpers/adder', 'qunit'], function (exports, _kalebrFrontendHelpersAdder, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | adder');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var result;\n    result = (0, _kalebrFrontendHelpersAdder.adder)(42);\n    return assert.ok(result);\n  });\n});","define('kalebr-frontend/tests/unit/models/user-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('user', 'Unit | Model | user', {\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model;\n    model = this.subject();\n    return assert.ok(!!model);\n  });\n});","define('kalebr-frontend/tests/unit/routes/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {});\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route;\n    route = this.subject();\n    return assert.ok(route);\n  });\n});","define('kalebr-frontend/tests/unit/routes/login-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:login', 'Unit | Route | login', {});\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route;\n    route = this.subject();\n    return assert.ok(route);\n  });\n});","define('kalebr-frontend/tests/unit/routes/questions-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:questions', 'Unit | Route | questions', {});\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route;\n    route = this.subject();\n    return assert.ok(route);\n  });\n});","define('kalebr-frontend/tests/unit/routes/questions/edit-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:questions/edit', 'Unit | Route | questions/edit', {});\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route;\n    route = this.subject();\n    return assert.ok(route);\n  });\n});","define('kalebr-frontend/tests/unit/routes/questions/new-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:questions/new', 'Unit | Route | questions/new', {});\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route;\n    route = this.subject();\n    return assert.ok(route);\n  });\n});","define('kalebr-frontend/tests/unit/routes/users-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:users', 'Unit | Route | users', {});\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route;\n    route = this.subject();\n    return assert.ok(route);\n  });\n});","define('kalebr-frontend/tests/unit/routes/users/edit-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:users/edit', 'Unit | Route | users/edit', {});\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route;\n    route = this.subject();\n    return assert.ok(route);\n  });\n});","define('kalebr-frontend/tests/unit/routes/users/new-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:users/new', 'Unit | Route | users/new', {});\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route;\n    route = this.subject();\n    return assert.ok(route);\n  });\n});","define('kalebr-frontend/tests/unit/serializers/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('application', 'Unit | Serializer | application', {\n    needs: ['serializer:application']\n  });\n\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record, serializedRecord;\n    record = this.subject();\n    serializedRecord = record.serialize();\n    return assert.ok(serializedRecord);\n  });\n});","/* jshint ignore:start */\n\nrequire('kalebr-frontend/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChEA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}